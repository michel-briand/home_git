#!/bin/bash
# -*-mode:sh;coding:iso-8859-15;-*-
#
# (fr) Environnement bash pour la gestion de configuration.
# (en) Bash environment for configuration management.
#
# Copyright (C) 2009, 2010 Michel Briand.
#
# This file is released under the GNU GPL license.
#

# SH library
SH_LIBRARY=${SH_LIBRARY:-~/jecm/shlib}
. $SH_LIBRARY/require.sh 2>/dev/null || {
    echo "Library require.sh is required (please set SH_LIBRARY to a sensible value)." >&2
    return 1
}
require_is_verbose

# --------------------------------------------
# Export all variable definied in this section
#
set -a

scm_platform=$R_SYSTEM # from require.sh

# Booleans

TRUE=0
FALSE=1
ENABLED=1
DISABLED=0

# Options
if [ -z "$scm_env_o_debug" ] ; then
    # if already defined in environment, do nothing
    scm_env_o_debug=$DISABLED # disable debug by default
fi
if [ -z "$scm_env_o_super_debug" ] ; then
    # if already defined in environment, do nothing
    scm_env_o_super_debug=$DISABLED # disable super debug by default
fi
scm_env_o_git=$ENABLED # enable git by default
scm_env_o_svn=$DISABLED # disable svn by default
scm_env_e_readlink=$DISABLED # use readlink ? will 'require' it
scm_env_e_realpath=$DISABLED # use realpath ? will 'require' it
scm_env_e_titlebar=$DISABLED # we check for xterm in setup

set +a
# end of "all export" section
# --------------------------------------------

# Debug function

shopt -s expand_aliases
alias ifD='[ $scm_env_o_debug -eq $ENABLED ] && '
alias ifDD='[ $scm_env_o_super_debug -eq $ENABLED ] && '

# Super debug

ifDD set -x

# Error & messages

# It's really important to have an echo-like function that
# do not alter stdout because many functions are expecting
# a return value through stdout

echoD()
{
    ifD echo "$*" >&2
}

# Requirements

require realpath REALPATH scm_env_e_realpath

case $R_SYSTEM in
    Darwin) require greadlink READLINK scm_env_e_readlink ;;
    Linux) require readlink READLINK scm_env_e_readlink ;;
    *) echo "Platform not supported: $scm_platform"; return 1 ;;
esac

require_clear_trap
# End of requirements

echoD "=== debug require ==="
echoD "scm_env_e_realpath=$scm_env_e_realpath $REALPATH"
echoD "scm_env_e_readlink=$scm_env_e_readlink $READLINK"
echoD

# WARNING:
# use \[ \] to remove inner text from the space count

scm_COLORS=( "\e[0;32m" "\e[0;36m" "\e[0;35m" )
scmNC="\e[0m"
scmRED="\e[0;31m"
scmGR="\e[0;32m"
scmY="\e[0;33m"
scmBO="\e[1m"
scnNBO="\e[22m" # reset bold
scmDF=${scm_COLORS[2]} # default color
# Title bar complete string: "\[\e]1;icon-title\007\e]2;main-title\007\]"
scmTIB="\e]2;" # title bar begin
scmTIE="\a" # title bar end (\a = \007)
scm_prompt_status="uninitialized"
scm_scm_status=
scm_cwd=
scm_cwd_abs=

scm_user_color() 
{
    case $USER in
	root) return 1;;
	michel) return 2;;
	*) return 3;;
    esac
}
export -f scm_user_color

scm_prompt_setup()
{
    local c
    scm_user_color
    c=$?
    scmDF=${scm_COLORS[$c]}
    scm_prompt_status="setup"
    # only set titlebar in a capable terminal:
    case $TERM in
	rxvt*|xterm*|gnome*|konsole*)
	    scm_env_e_titlebar=$ENABLED
            ;;
    esac
    export PROMPT_COMMAND="scm_prompt_update"
}
export -f scm_prompt_setup

scm_prompt_update()
{
    local t s c d st ts
    # set current directory
    scm_curdir
    # print a nice ~ instead of $HOME
    if [ "${scm_cwd}" -ef "$HOME" ] ; then
	d='~'
    else
	d=${scm_cwd/$HOME\//'~'/}
    fi
    # reduce width : 25 characters max
    if [ ${#d} -gt 25 ] ; then
	c="...${d:10}"
    else
	c=$d
    fi
    # get scm status
    if scm_under_scm ; then
	st=" $scm_scm_status"
    else
	st=""
    fi
    if [ ! -z "$st" ] ; then
	s="\[${scmBO}\]${st}\[${scmNBO}\]"
	ts="${st}"
    fi
    # set prompt
    PS1="\[${scmDF}\]\u@\h$s $c \$\[${scmNC}\] "
    # set title bar
    if [ $scm_env_e_titlebar -eq $ENABLED ] ; then
	# since we are in PROMPT_COMMAND callback, 
	# we could write directly to stdout if PS1
	# too long...
	t="${scmTIB}\u@\h${ts} $c${scmTIE}"
	PS1="\[${t}\]${PS1}"
    fi
    export PS1
}
export -f scm_prompt_update

scm_curdir()
{
    scm_cwd=$PWD
    scm_cwd_abs=$(scm_absdir "$scm_cwd")
}
export -f scm_curdir

# to complete with other SCM tools

scm_under_scm()
{
    if scm_check_CVS ; then
	return 0
    elif scm_check_SVN ; then
	return 0
    elif scm_check_GIT ; then
	return 0
    elif scm_check_HOME_GIT ; then
	return 0
    else
	return 1
    fi
}
export -f scm_under_scm

scm_check_CVS()
{
    if [ -d "CVS" ] ; then
	scm_scm_status="in CVS wk"
	return 0
    fi
    return 1
}
export -f scm_check_CVS

scm_check_SVN()
{
    if [ -d ".svn" ] ; then
	scm_scm_status="in SVN wk"
	return 0
    fi
    return 1
}
export -f scm_check_SVN

scm_check_HOME_GIT()
{
    if [ "$scm_cwd_abs" -ef "$scm_home_git_abs" ] ; then
	scm_scm_status="HOME_GIT"
	return 0
    fi
    return 1
}
export -f scm_check_HOME_GIT

scm_absdir() #1: path
{
    if [ "$1" -ef "$HOME" ] ; then
	echo $HOME
	return
    fi
    local tmp=${1/'~'/"$HOME"}
    echoD "scm_absdir: $tmp"
    if [ $scm_env_e_realpath -eq 1 ] ; then
	$REALPATH "$tmp"
    elif [ $scm_env_e_readlink -eq 1 ] ; then
	$READLINK -f "$tmp"
    else
	# no way to make this dir absolue...
	# no-op
	echo "$tmp" # return value
    fi
}
export -f scm_absdir

scm_find_git_dir() #1: starting path for search
{
    local dir=${1:-$PWD}
    local r=$TRUE
    local parent

    echoD "FIND GIT DIR: checking $dir"

    # check environment first
    if [ ! -z "$GIT_DIR" ] ; then
	if [ -d "$GIT_DIR" ] ; then
	    dir=$(scm_absdir "$GIT_DIR")
	else
	    # error: $GIT_DIR points to non-existing directory
	    dir=""
	    r=$FALSE
	fi
    else
	echoD "FIND GIT DIR: starting search at $dir"
	# traitement spécifique de la HOME
	if [ "$dir" -ef "$HOME" ] ; then
	    dir=$HOME
	else
	    until [ "$dir" -ef / ] || [ "$dir" -ef "$HOME" ] ; do
		if [ -d "$dir/.git" ]; then
		    dir=$(scm_absdir "$dir")
		    echoD "FIND GIT DIR: .git found at $dir"
		    break
		fi
		parent=${dir%/*}
		if [ -z "$parent" ] ; then
		    dir=/
		else
		    dir=$(scm_absdir "$parent")
		fi
		echoD "FIND GIT DIR: not found here, going $dir"
	    done
	fi
    fi
    echoD "FIND GIT DIR: end at $dir"
    echo "$dir" # return value
    return $r
}
export -f scm_find_git_dir

scm_find_git_branch() #1: repository path
{
    local dir=
    local branch=
    local head=

    dir=${1:?"scm_find_git_branch() requires 1 argument: repository path"}
    if [ -f "$dir/.git/HEAD" ]; then
	head=$(< "$dir/.git/HEAD")
	if [[ $head == ref:\ refs/heads/* ]]; then
	    branch="${head#*/*/}"
	elif [[ $head != '' ]]; then
	    branch='(detached)'
	else
	    branch='(unknown)'
	fi
	echo $branch # return value
	return $TRUE
    fi
    echo "" # return value
    return $FALSE
}
export -f scm_find_git_branch

scm_check_GIT()
{
    local branch=
    local repo=
    local dir=$(scm_find_git_dir)

    if [ $? -ne 0 ] ; then
	scm_scm_status=""
	return $FALSE
    fi
    repo=${dir##*/}
    # we can still have an empty string here
    if [ -z "$repo" ] ; then
	scm_scm_status=""
	return $FALSE
    fi

    # pick up the current branch
    branch=$(scm_find_git_branch "$dir")
    if [ $? -ne 0 ] ; then
	scm_scm_status=""
	return $FALSE
    fi
    scm_scm_status="[${repo}] _${branch}_"
    return $TRUE
}
export -f scm_check_GIT

ifD echo "Setup scm (cvs/svn/git) extended prompt"
scm_prompt_setup

# TODO: pas de completion pour CVS sur Debian ?

# Completion Bash pour Git
if [ $scm_env_o_git -eq $ENABLED ] ; then
    # sur Debian
    [ -f /etc/bash_completion.d/git ] && \
	. /etc/bash_completion.d/git
    # sur Mac OSX (avec Mac Ports)
    [ -f /opt/local/share/doc/git-core/contrib/completion/git-completion.bash ] && \
	. /opt/local/share/doc/git-core/contrib/completion/git-completion.bash
fi

# Completion Bash pour Subversion
if [ $scm_env_o_svn -eq $ENABLED ] ; then
    # sur Debian
    [ -f /etc/bash_completion.d/subversion ] && \
	. /etc/bash_completion.d/subversion
    # sur Mac OSX (?)
fi

# Support home_git
if [ ! -z "$HOME_GIT_WORK_TREE" ] ; then
    scm_home_git_abs=$(scm_absdir "$HOME_GIT_WORK_TREE")
    ifD echo "support home_git activé ($scm_home_git_abs)"
else
    scm_home_git_abs=
fi
